/*     Created: 03.10.2020    Author: Stefan Nyffenegger*/redirectWithJWT();/** * Adds the JWT token to the redirect * @param url URL to go to */function redirectWithJWT() {    /*console.log("JWT: "+window.sessionStorage.jwt);    var xhttp = new XMLHttpRequest();    xhttp.onreadystatechange = function () {        xhttp.open("GET", "/api/auth/signin", true);        xhttp.setRequestHeader('Authorization', "Bearer " + window.sessionStorage.jwt);        xhttp.send();        window.location.href = url;    }*/    //http.request(url, { 'Authorization': 'Bearer ' + jwt });    /*$.ajax({        url: url,        type: "GET",        beforeSend: function(xhr) {            xhr.setRequestHeader('Authorization', 'Bearer ' + window.sessionStorage.jwt);        },        success: function() {            setTimeout(function() {                window.location.href = url;            }, 333);        }    });*/    /*axios.interceptors.request.use(req => {        // `req` is the Axios request config, so you can modify        // the `headers`.        req.headers.authorization = "Bearer "+window.sessionStorage.jwt;        return req;    });*/    const interceptor = axios.interceptors.response.use(        response => response,        error => {            // Reject promise if usual error            if (errorResponse.status !== 401) {                return Promise.reject(error);            }            /*             * When response code is 401, try to refresh the token.             * Eject the interceptor so it doesn't loop in case             * token refresh causes the 401 response             */            axios.interceptors.response.eject(interceptor);            return axios.post('/api/signin', {                'refresh_token': this._getToken('refresh_token')            }).then(response => {                saveToken();                error.response.config.headers['Authorization'] = 'Bearer ' + response.data.accessToken;                return axios(error.response.config);            }).catch(error => {                destroyToken();                this.router.push('/login');                return Promise.reject(error);            }).finally(redirectWithJWT);        }    );}