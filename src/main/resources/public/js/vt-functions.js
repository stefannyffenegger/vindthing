/*     Created: 03.10.2020    Author: Stefan Nyffenegger*/redirectWithJWT();/** * Checks if a JWT token is available, if it is, it will be sent */function checkJWT() {    if (window.sessionStorage.jwt != null) {        // declare a request interceptor        axios.interceptors.request.use(config => {            // perform a task before the request is sent            console.log('Request was sent');            return config;        }, error => {            // handle the error            return Promise.reject(error);        });        // sent a GET request        axios.get('https://api.github.com/users/mapbox').then(response => {            console.log(response.data.created_at);        });    }}/** * Adds the JWT token to the redirect * @param url URL to go to */function redirectWithJWT() {    /*console.log("JWT: "+window.sessionStorage.jwt);    var xhttp = new XMLHttpRequest();    xhttp.onreadystatechange = function () {        xhttp.open("GET", "/api/auth/signin", true);        xhttp.setRequestHeader('Authorization', "Bearer " + window.sessionStorage.jwt);        xhttp.send();        window.location.href = url;    }*/    //http.request(url, { 'Authorization': 'Bearer ' + jwt });    /*$.ajax({        url: url,        type: "GET",        beforeSend: function(xhr) {            xhr.setRequestHeader('Authorization', 'Bearer ' + window.sessionStorage.jwt);        },        success: function() {            setTimeout(function() {                window.location.href = url;            }, 333);        }    });*/    /*axios.interceptors.request.use(req => {        // `req` is the Axios request config, so you can modify        // the `headers`.        req.headers.authorization = "Bearer "+window.sessionStorage.jwt;        return req;    });*/    const interceptor = axios.interceptors.response.use(        response => response,        error => {            // Reject promise if usual error            if (errorResponse.status !== 401) {                return Promise.reject(error);            }            /*             * When response code is 401, try to refresh the token.             * Eject the interceptor so it doesn't loop in case             * token refresh causes the 401 response             */            axios.interceptors.response.eject(interceptor);            return axios.post('/api/signin', {                'refresh_token': this._getToken('refresh_token')            }).then(response => {                saveToken();                error.response.config.headers['Authorization'] = 'Bearer ' + response.data.accessToken;                return axios(error.response.config);            }).catch(error => {                destroyToken();                this.router.push('/login');                return Promise.reject(error);            }).finally(redirectWithJWT);        }    );}/** * Gets the JSON data from the requested source and displays them on the page. * Allowed input values: pizzas, salads, softdrinks. * Requires an implemented createGrid function with the html grid as return value. * Requires an html element with the id "order". * Returns the JSON data as JavaScript object. */function requestOrders(order) {    var url = "https://tonyspizzafactory.herokuapp.com/api/" + order;    var xhttp = new XMLHttpRequest();    xhttp.onreadystatechange = function () {        if (this.readyState == 4) {            if (this.status == 200) {                var json = JSON.parse(this.responseText);                document.getElementById("order").innerHTML = createGrid(json);            } else if (this.status >= 400 && this.status <= 499) {                document.getElementById("response").innerHTML = '<div class="alert alert-danger mb-0 pt-2 pb-2" id="response">Client Error, please try again later or contact us on phone or e-mail</div>';            } else if (this.status >= 500 && this.status <= 599) {                document.getElementById("response").innerHTML = '<div class="alert alert-danger mb-0 pt-2 pb-2" id="response">Server Error, please try again later or contact us on phone or e-mail</div>';            } else if (this.status == 0) {                document.getElementById("response").innerHTML = '<div class="alert alert-danger mb-0 pt-2 pb-2" id="response">Unknown Error, please try again later or contact us on phone or e-mail</div>';            }        }    };    xhttp.open("GET", url, true);    xhttp.setRequestHeader("Accept", "application/json");    xhttp.setRequestHeader('Authorization', auth);    xhttp.send();}